<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
  <meta charset="utf-8">
  <title>Vermeg Jira Chatbot</title>
  <link rel="stylesheet" href="https://static.staticsave.com/jscss/style.css"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Google Fonts Link For Icons -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0"/>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0"/>
  <link rel="icon" type="image/x-icon" href="$webResourceManager.getResourceURL('com.example.plugins:chatbot-resources', 'images/bot.ico')"/>
</head>
<body>
<button class="chatbot-toggler">
  <span class="material-symbols-rounded">mode_comment</span>
  <span class="material-symbols-outlined">close</span>
</button>
<div class="chatbot">
  <header>
    <h2>Jira Chatbot</h2>
    <span class="close-btn material-symbols-outlined">close</span>
  </header>
  <ul class="chatbox">
    <li class="chat incoming">
      <span class="material-symbols-outlined">smart_toy</span>
      <p>Hi there ðŸ‘‹<br>Type hello to start the chat</p>
    </li>
  </ul>
  <div class="chat-input">
    <textarea placeholder="Enter a message..." spellcheck="false" required></textarea>
    <span id="send-btn" class="material-symbols-rounded">send</span>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/ollama-js-client/dist/browser/iife/ollama-js.global.js"></script>
<!--<script type="module" src="https://static.staticsave.com/jscss/script3.js"></script>-->

<script type="module">
  AJS.toInit(() => {
    const chatbotToggler = document.querySelector(".chatbot-toggler");
    const closeBtn = document.querySelector(".close-btn");
    const chatbox = document.querySelector(".chatbox");
    const chatInput = document.querySelector(".chat-input textarea");
    const sendChatBtn = document.querySelector(".chat-input span");

    let userMessage = null;
    const inputInitHeight = chatInput.scrollHeight;
    let chatHistory = [];

    const createChatLi = (message, className) => {
      const chatLi = document.createElement("li");
      chatLi.classList.add("chat", `${className}`);
      let chatContent = className === "outgoing" ? `<p></p>` : `<span class="material-symbols-outlined">smart_toy</span><p></p>`;
      chatLi.innerHTML = chatContent;
      chatLi.querySelector("p").textContent = message;
      return chatLi;
    }

    const generateResponse = async (chatElement, userMessage) => {
      const encodedMessage = encodeURIComponent(userMessage);
      const eventSource = new EventSource(`http://localhost:5000/ai_stream?query=${encodedMessage}`);

      eventSource.onmessage = (event) => {
        const data = event.data;
        if (data === "[DONE]") {
          eventSource.close();
          chatHistory.push({ role: 'assistant', content: chatElement.querySelector("p").textContent });
        } else {
          // Si c'est la premiÃ¨re rÃ©ponse, supprimez le message "Thinking..."
          if (chatElement.querySelector("p").textContent === "Thinking...") {
            chatElement.querySelector("p").textContent = "";
          }
          // ConcatÃ©nez la rÃ©ponse reÃ§ue au message existant
          chatElement.querySelector("p").textContent += data;
          chatbox.scrollTo(0, chatbox.scrollHeight);
        }
      };

      eventSource.onerror = (error) => {
        console.error("Error:", error);
        eventSource.close();
        if (chatElement.querySelector("p").textContent === "Thinking...") {
          chatElement.querySelector("p").textContent = "Oops! Something went wrong. Please try again.";
        } else {
          chatElement.querySelector("p").textContent += "\nOops! Something went wrong. Please try again.";
        }
        chatElement.querySelector("p").classList.add("error");
      };
    }

    const handleChat = () => {
      userMessage = chatInput.value.trim();
      if (!userMessage) return;

      chatInput.value = "";
      chatInput.style.height = `${inputInitHeight}px`;

      chatbox.appendChild(createChatLi(userMessage, "outgoing"));
      chatbox.scrollTo(0, chatbox.scrollHeight);

      chatHistory.push({ role: 'user', content: userMessage });

      setTimeout(() => {
        const incomingChatLi = createChatLi("Thinking...", "incoming");
        chatbox.appendChild(incomingChatLi);
        chatbox.scrollTo(0, chatbox.scrollHeight);
        generateResponse(incomingChatLi, userMessage);
      }, 600);
    }

    chatInput.addEventListener("input", () => {
      chatInput.style.height = `${inputInitHeight}px`;
      chatInput.style.height = `${chatInput.scrollHeight}px`;
    });

    chatInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
        e.preventDefault();
        handleChat();
      }
    });

    sendChatBtn.addEventListener("click", handleChat);
    closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
    chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
  });
</script>
<!--
<script type="module">
  import { Ollama } from 'https://cdn.jsdelivr.net/npm/@langchain/community@0.2.17/dist/vectorstores/faiss.min.js';

  document.addEventListener('DOMContentLoaded', () => {
    const chatbotToggler = document.querySelector(".chatbot-toggler");
    const closeBtn = document.querySelector(".close-btn");
    const chatbox = document.querySelector(".chatbox");
    const chatInput = document.querySelector(".chat-input textarea");
    const sendChatBtn = document.querySelector(".chat-input span");

    let userMessage = null; // Variable to store user's message
    let availableModel = "jira-llama3:"; // Default to a known model
    let chatHistory = []; // Store chat history

    const ollama_host = localStorage.getItem("host-address") || 'http://localhost:11434';

    const ollama = new Ollama({
      baseUrl: ollama_host,
      model: "jira-llama3"
    });

    const createChatLi = (message, className) => {
      const chatLi = document.createElement("li");
      chatLi.classList.add("chat", `${className}`);
      let chatContent = className === "outgoing" ? `<p></p>` : `<span class="material-symbols-outlined">smart_toy</span><p></p>`;
      chatLi.innerHTML = chatContent;
      chatLi.querySelector("p").textContent = message;
      return chatLi;
    }

    const generateResponse = async (chatElement) => {
      const messageElement = chatElement.querySelector("p");
      try {
        const stream = await ollama.stream(userMessage);
        const chunks = [];
        for await (const chunk of stream) {
          chunks.push(chunk);
        }
        const responseBody = chunks.join("").trim();

        if (responseBody.includes("'api_link'") && responseBody.includes("'parameters'")) {
          const startIndex = responseBody.indexOf("{");
          const endIndex = responseBody.lastIndexOf("}");
          let jsonResponse = responseBody.substring(startIndex, endIndex + 1);
          jsonResponse = jsonResponse.replace(/'/g, '"');
          const responseObject = JSON.parse(jsonResponse);

          const confirmation = confirm("Do you want to proceed with creating the issue?");
          if (confirmation) {
            const apiLink = responseObject.api_link;
            const parameters = responseObject.parameters;

            const authHeader = 'Basic ' + btoa('your-username:your-api-token');

            const requestOptions = {
              method: 'GET'

            };

            fetch(apiLink, requestOptions)
                    .then(response => {
                      console.log("API Response:", response);
                    })
                    .catch(error => {
                      console.error("API Error:", error);
                    });
          } else {
            messageElement.textContent = "Okay, let me know if you need any further assistance.";
          }
        } else {
          messageElement.textContent = responseBody;
        }
        chatHistory.push({ role: 'assistant', content: messageElement.textContent });
      } catch (error) {
        messageElement.classList.add("error");
        messageElement.textContent = "Oops! Something went wrong. Please try again.";
        console.error("Error:", error);
      } finally {
        chatbox.scrollTo(0, chatbox.scrollHeight);
      }
    }

    const handleChat = () => {
      userMessage = chatInput.value.trim();
      if (!userMessage) return;

      chatInput.value = "";
      chatInput.style.height = `${inputInitHeight}px`;

      chatbox.appendChild(createChatLi(userMessage, "outgoing"));
      chatbox.scrollTo(0, chatbox.scrollHeight);

      chatHistory.push({ role: 'user', content: userMessage });

      setTimeout(() => {
        const incomingChatLi = createChatLi("Thinking...", "incoming");
        chatbox.appendChild(incomingChatLi);
        chatbox.scrollTo(0, chatbox.scrollHeight);
        generateResponse(incomingChatLi);
      }, 600);
    }

    chatInput.addEventListener("input", () => {
      chatInput.style.height = `${inputInitHeight}px`;
      chatInput.style.height = `${chatInput.scrollHeight}px`;
    });

    chatInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
        e.preventDefault();
        handleChat();
      }
    });

    sendChatBtn.addEventListener("click", handleChat);
    closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
    chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
  });
</script> -->
</body>
</html>
